/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kyle
 */
public class GUIDesign extends javax.swing.JFrame
{

    /**
     * Creates new form GUIDesign
     */
    Timer t;

    private JButton[][] gridBlock = new JButton[14][20];

    int[][] grid = new int[14][20];
    private RunGame rg = new RunGame();
    private UsePlayer pl = new UsePlayer();
    private SavedGame sg = new SavedGame();

    String selectedMaze = "", user = "", pass = "", frame = "", passConf = "", colour = "", question = "", newPass = "";
    int posRow = 0, posCol = 0, secs = 0, mins = 0, length = 0, count = 0;

    boolean isItNew = false;

    public GUIDesign()
    {
        initComponents();
        MazeScreen.setLocationRelativeTo(this);

        btnPlay.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        LoginScreen = new javax.swing.JFrame();
        lblLoginTitle = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        cmdUsername = new javax.swing.JComboBox<>();
        pwdPassword = new javax.swing.JPasswordField();
        btnLoginScreen = new javax.swing.JButton();
        btnBackLogin = new javax.swing.JButton();
        btnForgot = new javax.swing.JButton();
        lblBackgrLogin = new javax.swing.JLabel();
        RegisterScreen = new javax.swing.JFrame();
        lblRegister = new javax.swing.JLabel();
        lblUsernameReg = new javax.swing.JLabel();
        lblPasswordReg = new javax.swing.JLabel();
        lblPasswordConReg = new javax.swing.JLabel();
        btnRegisterScreen = new javax.swing.JButton();
        txfUsernameReg = new javax.swing.JTextField();
        txfPasswordReg = new javax.swing.JPasswordField();
        txfPasswordConfReg = new javax.swing.JPasswordField();
        btnBackReg = new javax.swing.JButton();
        chkRegPass = new javax.swing.JCheckBox();
        lblBackgrReg = new javax.swing.JLabel();
        DeleteScreen = new javax.swing.JFrame();
        lblDeleteScreen = new javax.swing.JLabel();
        lblUsernameDel = new javax.swing.JLabel();
        btnDeleteScreen = new javax.swing.JButton();
        cmdUsernameDel = new javax.swing.JComboBox<>();
        lblPasswordDel = new javax.swing.JLabel();
        txfPasswordDel = new javax.swing.JPasswordField();
        btnBackDel = new javax.swing.JButton();
        chkDelPass = new javax.swing.JCheckBox();
        lblBackgrDel = new javax.swing.JLabel();
        ChooseScreen = new javax.swing.JFrame();
        lblChoose = new javax.swing.JLabel();
        lblMaze = new javax.swing.JLabel();
        cmdMaze = new javax.swing.JComboBox<>();
        cmdColour = new javax.swing.JComboBox<>();
        lblColour = new javax.swing.JLabel();
        btnPlayChoose = new javax.swing.JButton();
        btnLogoutChoose = new javax.swing.JButton();
        lblBackgrChoose = new javax.swing.JLabel();
        PauseScreen = new javax.swing.JFrame();
        lblPause = new javax.swing.JLabel();
        btnContinuePause = new javax.swing.JButton();
        btnHomePause = new javax.swing.JButton();
        btnSaveGame = new javax.swing.JButton();
        lblBackgrPause = new javax.swing.JLabel();
        HelpScreen = new javax.swing.JFrame();
        lblHelp = new javax.swing.JLabel();
        btnBackHelp = new javax.swing.JButton();
        tbPane = new javax.swing.JTabbedPane();
        jPanePlay = new javax.swing.JPanel();
        scrlPanePlay = new javax.swing.JScrollPane();
        txaPlay = new javax.swing.JTextArea();
        jPaneDelete = new javax.swing.JPanel();
        scrlPaneDel = new javax.swing.JScrollPane();
        txaDelete = new javax.swing.JTextArea();
        jPaneTable = new javax.swing.JPanel();
        scrlPaneScores = new javax.swing.JScrollPane();
        txaScores = new javax.swing.JTextArea();
        jPaneReg = new javax.swing.JPanel();
        scrlPaneReg = new javax.swing.JScrollPane();
        txaReg = new javax.swing.JTextArea();
        lblBackgrHelp = new javax.swing.JLabel();
        MazeScreen = new javax.swing.JFrame();
        lblTitleMaze = new javax.swing.JLabel();
        lblTimerCounterSeconds = new javax.swing.JLabel();
        lblTimer = new javax.swing.JLabel();
        lblTimerCounterMin = new javax.swing.JLabel();
        btnPause = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        scrlPaneGame = new javax.swing.JScrollPane();
        txaGameScreen = new javax.swing.JTextArea();
        lblSecs = new javax.swing.JLabel();
        lblMins = new javax.swing.JLabel();
        lblBackgrMaze = new javax.swing.JLabel();
        MenuBarMaze = new javax.swing.JMenuBar();
        MenuMaze = new javax.swing.JMenu();
        menMazeHelp = new javax.swing.JMenuItem();
        BestTimesScreen = new javax.swing.JFrame();
        btnBackTimes = new javax.swing.JButton();
        scrlPaneTimes = new javax.swing.JScrollPane();
        tblTimes = new javax.swing.JTable();
        lblBackgrBestT = new javax.swing.JLabel();
        SaveScreen = new javax.swing.JFrame();
        btnExitSave = new javax.swing.JButton();
        btnHomeSave = new javax.swing.JButton();
        lblSaveScreen = new javax.swing.JLabel();
        lblSaveBack = new javax.swing.JLabel();
        lblMazeTitle = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnBestTimes = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();
        MainBack = new javax.swing.JLabel();

        LoginScreen.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        LoginScreen.setTitle("Login");
        LoginScreen.setMinimumSize(new java.awt.Dimension(360, 300));
        LoginScreen.setResizable(false);
        LoginScreen.getContentPane().setLayout(null);

        lblLoginTitle.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblLoginTitle.setText("Login");
        LoginScreen.getContentPane().add(lblLoginTitle);
        lblLoginTitle.setBounds(150, 10, 79, 48);

        lblPassword.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblPassword.setText("Password:");
        LoginScreen.getContentPane().add(lblPassword);
        lblPassword.setBounds(20, 140, 85, 30);

        lblUsername.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblUsername.setText("Username:");
        LoginScreen.getContentPane().add(lblUsername);
        lblUsername.setBounds(18, 85, 85, 31);

        cmdUsername.setToolTipText("Choose your username");
        LoginScreen.getContentPane().add(cmdUsername);
        cmdUsername.setBounds(130, 90, 100, 37);

        pwdPassword.setToolTipText("Enter your password");
        pwdPassword.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                pwdPasswordKeyPressed(evt);
            }
        });
        LoginScreen.getContentPane().add(pwdPassword);
        pwdPassword.setBounds(130, 140, 100, 30);

        btnLoginScreen.setBackground(new java.awt.Color(255, 204, 204));
        btnLoginScreen.setText("Login");
        btnLoginScreen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnLoginScreenActionPerformed(evt);
            }
        });
        LoginScreen.getContentPane().add(btnLoginScreen);
        btnLoginScreen.setBounds(160, 190, 72, 36);

        btnBackLogin.setBackground(new java.awt.Color(255, 204, 204));
        btnBackLogin.setText("Back");
        btnBackLogin.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnBackLoginActionPerformed(evt);
            }
        });
        LoginScreen.getContentPane().add(btnBackLogin);
        btnBackLogin.setBounds(10, 10, 59, 32);

        btnForgot.setBackground(new java.awt.Color(255, 204, 204));
        btnForgot.setText("Forgot Password");
        btnForgot.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnForgotActionPerformed(evt);
            }
        });
        LoginScreen.getContentPane().add(btnForgot);
        btnForgot.setBounds(20, 190, 130, 36);

        lblBackgrLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Background.jpg"))); // NOI18N
        LoginScreen.getContentPane().add(lblBackgrLogin);
        lblBackgrLogin.setBounds(0, 0, 400, 300);

        RegisterScreen.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        RegisterScreen.setTitle("Register");
        RegisterScreen.setAlwaysOnTop(true);
        RegisterScreen.setMinimumSize(new java.awt.Dimension(405, 328));
        RegisterScreen.setResizable(false);
        RegisterScreen.getContentPane().setLayout(null);

        lblRegister.setFont(lblRegister.getFont().deriveFont(lblRegister.getFont().getStyle() | java.awt.Font.BOLD, lblRegister.getFont().getSize()+13));
        lblRegister.setText("Register");
        RegisterScreen.getContentPane().add(lblRegister);
        lblRegister.setBounds(109, 12, 106, 48);

        lblUsernameReg.setFont(lblUsernameReg.getFont().deriveFont(lblUsernameReg.getFont().getStyle() | java.awt.Font.BOLD, lblUsernameReg.getFont().getSize()+3));
        lblUsernameReg.setText("Username:");
        RegisterScreen.getContentPane().add(lblUsernameReg);
        lblUsernameReg.setBounds(18, 68, 90, 35);

        lblPasswordReg.setFont(lblPasswordReg.getFont().deriveFont(lblPasswordReg.getFont().getStyle() | java.awt.Font.BOLD, lblPasswordReg.getFont().getSize()+3));
        lblPasswordReg.setText("Password:");
        RegisterScreen.getContentPane().add(lblPasswordReg);
        lblPasswordReg.setBounds(18, 121, 90, 35);

        lblPasswordConReg.setFont(lblPasswordConReg.getFont().deriveFont(lblPasswordConReg.getFont().getStyle() | java.awt.Font.BOLD, lblPasswordConReg.getFont().getSize()+3));
        lblPasswordConReg.setText("Confirm Password:");
        RegisterScreen.getContentPane().add(lblPasswordConReg);
        lblPasswordConReg.setBounds(18, 161, 133, 35);

        btnRegisterScreen.setBackground(new java.awt.Color(255, 204, 204));
        btnRegisterScreen.setText("Register");
        btnRegisterScreen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRegisterScreenActionPerformed(evt);
            }
        });
        RegisterScreen.getContentPane().add(btnRegisterScreen);
        btnRegisterScreen.setBounds(159, 227, 118, 33);

        txfUsernameReg.setToolTipText("Enter Username");
        RegisterScreen.getContentPane().add(txfUsernameReg);
        txfUsernameReg.setBounds(157, 80, 114, 26);

        txfPasswordReg.setToolTipText("Enter Password");
        RegisterScreen.getContentPane().add(txfPasswordReg);
        txfPasswordReg.setBounds(157, 122, 114, 26);

        txfPasswordConfReg.setToolTipText("Enter Confirm Password");
        txfPasswordConfReg.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txfPasswordConfRegKeyPressed(evt);
            }
        });
        RegisterScreen.getContentPane().add(txfPasswordConfReg);
        txfPasswordConfReg.setBounds(157, 167, 114, 26);

        btnBackReg.setBackground(new java.awt.Color(255, 204, 204));
        btnBackReg.setText("Back");
        btnBackReg.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnBackRegActionPerformed(evt);
            }
        });
        RegisterScreen.getContentPane().add(btnBackReg);
        btnBackReg.setBounds(6, 0, 59, 32);

        chkRegPass.setText("Show Password");
        chkRegPass.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkRegPassActionPerformed(evt);
            }
        });
        RegisterScreen.getContentPane().add(chkRegPass);
        chkRegPass.setBounds(280, 170, 130, 24);

        lblBackgrReg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Background.jpg"))); // NOI18N
        RegisterScreen.getContentPane().add(lblBackgrReg);
        lblBackgrReg.setBounds(0, 0, 400, 300);

        DeleteScreen.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        DeleteScreen.setTitle("Delete");
        DeleteScreen.setLocationByPlatform(true);
        DeleteScreen.setMinimumSize(new java.awt.Dimension(360, 295));
        DeleteScreen.setResizable(false);
        DeleteScreen.setSize(new java.awt.Dimension(245, 203));
        DeleteScreen.getContentPane().setLayout(null);

        lblDeleteScreen.setFont(lblDeleteScreen.getFont().deriveFont(lblDeleteScreen.getFont().getStyle() | java.awt.Font.BOLD, lblDeleteScreen.getFont().getSize()+13));
        lblDeleteScreen.setText("Delete");
        DeleteScreen.getContentPane().add(lblDeleteScreen);
        lblDeleteScreen.setBounds(140, 10, 80, 40);

        lblUsernameDel.setFont(lblUsernameDel.getFont().deriveFont(lblUsernameDel.getFont().getStyle() | java.awt.Font.BOLD, lblUsernameDel.getFont().getSize()+3));
        lblUsernameDel.setText("Username:");
        DeleteScreen.getContentPane().add(lblUsernameDel);
        lblUsernameDel.setBounds(20, 70, 80, 30);

        btnDeleteScreen.setBackground(new java.awt.Color(255, 204, 204));
        btnDeleteScreen.setText("Delete");
        btnDeleteScreen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDeleteScreenActionPerformed(evt);
            }
        });
        DeleteScreen.getContentPane().add(btnDeleteScreen);
        btnDeleteScreen.setBounds(150, 190, 80, 40);

        cmdUsernameDel.setToolTipText("Choose username");
        DeleteScreen.getContentPane().add(cmdUsernameDel);
        cmdUsernameDel.setBounds(110, 70, 110, 30);

        lblPasswordDel.setFont(lblPasswordDel.getFont().deriveFont(lblPasswordDel.getFont().getStyle() | java.awt.Font.BOLD, lblPasswordDel.getFont().getSize()+3));
        lblPasswordDel.setText("Password:");
        DeleteScreen.getContentPane().add(lblPasswordDel);
        lblPasswordDel.setBounds(20, 130, 80, 40);

        txfPasswordDel.setToolTipText("Enter your password");
        txfPasswordDel.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txfPasswordDelKeyPressed(evt);
            }
        });
        DeleteScreen.getContentPane().add(txfPasswordDel);
        txfPasswordDel.setBounds(110, 140, 110, 30);

        btnBackDel.setBackground(new java.awt.Color(255, 204, 204));
        btnBackDel.setText("Back");
        btnBackDel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnBackDelActionPerformed(evt);
            }
        });
        DeleteScreen.getContentPane().add(btnBackDel);
        btnBackDel.setBounds(20, 10, 70, 30);

        chkDelPass.setText("Show Password");
        chkDelPass.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkDelPassActionPerformed(evt);
            }
        });
        DeleteScreen.getContentPane().add(chkDelPass);
        chkDelPass.setBounds(230, 140, 130, 30);

        lblBackgrDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Background.jpg"))); // NOI18N
        DeleteScreen.getContentPane().add(lblBackgrDel);
        lblBackgrDel.setBounds(0, 0, 380, 320);

        ChooseScreen.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        ChooseScreen.setTitle("Choose");
        ChooseScreen.setMinimumSize(new java.awt.Dimension(290, 269));
        ChooseScreen.setResizable(false);
        ChooseScreen.getContentPane().setLayout(null);

        lblChoose.setFont(lblChoose.getFont().deriveFont(lblChoose.getFont().getStyle() | java.awt.Font.BOLD, lblChoose.getFont().getSize()+13));
        lblChoose.setText("Choose");
        ChooseScreen.getContentPane().add(lblChoose);
        lblChoose.setBounds(90, 10, 95, 33);

        lblMaze.setFont(lblMaze.getFont().deriveFont(lblMaze.getFont().getStyle() | java.awt.Font.BOLD, lblMaze.getFont().getSize()+3));
        lblMaze.setText("Maze:");
        ChooseScreen.getContentPane().add(lblMaze);
        lblMaze.setBounds(28, 93, 42, 20);

        cmdMaze.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Maze1", "Maze2", "Maze3" }));
        cmdMaze.setToolTipText("Choose maze");
        ChooseScreen.getContentPane().add(cmdMaze);
        cmdMaze.setBounds(117, 91, 90, 26);

        cmdColour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Orange", "Purple" }));
        cmdColour.setToolTipText("Choose your characters colour");
        cmdColour.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                cmdColourKeyPressed(evt);
            }
        });
        ChooseScreen.getContentPane().add(cmdColour);
        cmdColour.setBounds(117, 162, 90, 26);

        lblColour.setFont(lblColour.getFont().deriveFont(lblColour.getFont().getStyle() | java.awt.Font.BOLD, lblColour.getFont().getSize()+3));
        lblColour.setText("Colour:");
        ChooseScreen.getContentPane().add(lblColour);
        lblColour.setBounds(28, 164, 52, 20);

        btnPlayChoose.setBackground(new java.awt.Color(255, 204, 204));
        btnPlayChoose.setText("Play");
        btnPlayChoose.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnPlayChooseActionPerformed(evt);
            }
        });
        ChooseScreen.getContentPane().add(btnPlayChoose);
        btnPlayChoose.setBounds(218, 192, 54, 32);

        btnLogoutChoose.setBackground(new java.awt.Color(255, 204, 204));
        btnLogoutChoose.setText("Logout");
        btnLogoutChoose.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnLogoutChooseActionPerformed(evt);
            }
        });
        ChooseScreen.getContentPane().add(btnLogoutChoose);
        btnLogoutChoose.setBounds(10, 10, 70, 32);

        lblBackgrChoose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Background.jpg"))); // NOI18N
        ChooseScreen.getContentPane().add(lblBackgrChoose);
        lblBackgrChoose.setBounds(-9, -4, 410, 310);

        PauseScreen.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        PauseScreen.setTitle("Pause");
        PauseScreen.setMinimumSize(new java.awt.Dimension(250, 219));
        PauseScreen.setResizable(false);
        PauseScreen.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblPause.setFont(lblPause.getFont().deriveFont(lblPause.getFont().getStyle() | java.awt.Font.BOLD, 24));
        lblPause.setText("Pause");
        PauseScreen.getContentPane().add(lblPause, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 18, -1, -1));

        btnContinuePause.setBackground(new java.awt.Color(255, 204, 204));
        btnContinuePause.setText("Continue");
        btnContinuePause.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnContinuePauseActionPerformed(evt);
            }
        });
        PauseScreen.getContentPane().add(btnContinuePause, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 62, 100, -1));

        btnHomePause.setBackground(new java.awt.Color(255, 204, 204));
        btnHomePause.setText("Home");
        btnHomePause.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnHomePauseActionPerformed(evt);
            }
        });
        PauseScreen.getContentPane().add(btnHomePause, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 146, 100, -1));

        btnSaveGame.setBackground(new java.awt.Color(255, 204, 204));
        btnSaveGame.setText("Save Game");
        btnSaveGame.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSaveGameActionPerformed(evt);
            }
        });
        PauseScreen.getContentPane().add(btnSaveGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 103, 100, -1));

        lblBackgrPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Background.jpg"))); // NOI18N
        PauseScreen.getContentPane().add(lblBackgrPause, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        HelpScreen.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        HelpScreen.setTitle("Help");
        HelpScreen.setMinimumSize(new java.awt.Dimension(450, 340));
        HelpScreen.setResizable(false);
        HelpScreen.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblHelp.setFont(lblHelp.getFont().deriveFont(lblHelp.getFont().getStyle() | java.awt.Font.BOLD, 24));
        lblHelp.setText("Help");
        HelpScreen.getContentPane().add(lblHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(89, 12, -1, -1));

        btnBackHelp.setBackground(new java.awt.Color(255, 204, 204));
        btnBackHelp.setText("Back");
        btnBackHelp.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnBackHelpActionPerformed(evt);
            }
        });
        HelpScreen.getContentPane().add(btnBackHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        tbPane.setBorder(javax.swing.BorderFactory.createMatteBorder(10, 10, 10, 10, new java.awt.Color(0, 0, 0)));

        txaPlay.setColumns(30);
        txaPlay.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txaPlay.setRows(10);
        txaPlay.setText("Instructions: \nUse your arrow keys to move. \nDown arrow to move down.\nUp arrow to move up.\nLeft arrow to move left.\nRight arrow to move right.\n\nFind your way through the path to the finish line.\nTry complete the maze in the least ammount of time.");
        scrlPanePlay.setViewportView(txaPlay);

        jPanePlay.add(scrlPanePlay);

        tbPane.addTab("How to play", jPanePlay);

        txaDelete.setEditable(false);
        txaDelete.setColumns(30);
        txaDelete.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txaDelete.setRows(10);
        txaDelete.setText("Click the delete button \nSelect your username, enter your password \nIf your details match up,\nyour account will be deleted.");
        scrlPaneDel.setViewportView(txaDelete);

        jPaneDelete.add(scrlPaneDel);

        tbPane.addTab("How to delete an account", jPaneDelete);

        txaScores.setEditable(false);
        txaScores.setColumns(30);
        txaScores.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txaScores.setRows(10);
        txaScores.setText("Click the best time button\nA table will be displayed with all the users \nwith best times.\nIt will be displayed from best to worst.");
        scrlPaneScores.setViewportView(txaScores);

        jPaneTable.add(scrlPaneScores);

        tbPane.addTab("How to view high scores", jPaneTable);

        txaReg.setEditable(false);
        txaReg.setColumns(30);
        txaReg.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txaReg.setRows(10);
        txaReg.setText("Click the register button\nEnter in your desired username,password\nand confirm password. If your details are legible, \nyou will be prompted with a security question. \nOnce answered your account will be registerd. \nNow you can login.");
        scrlPaneReg.setViewportView(txaReg);

        jPaneReg.add(scrlPaneReg);

        tbPane.addTab("How to register", jPaneReg);

        HelpScreen.getContentPane().add(tbPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 380, 240));

        lblBackgrHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Background.jpg"))); // NOI18N
        HelpScreen.getContentPane().add(lblBackgrHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 450, 340));

        MazeScreen.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        MazeScreen.setTitle("Maze");
        MazeScreen.setMinimumSize(new java.awt.Dimension(909, 766));
        MazeScreen.setResizable(false);
        MazeScreen.getContentPane().setLayout(null);

        lblTitleMaze.setFont(lblTitleMaze.getFont().deriveFont(lblTitleMaze.getFont().getStyle() | java.awt.Font.BOLD, 24));
        lblTitleMaze.setText("The Escapist Maze");
        MazeScreen.getContentPane().add(lblTitleMaze);
        lblTitleMaze.setBounds(50, 20, 214, 32);

        lblTimerCounterSeconds.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        MazeScreen.getContentPane().add(lblTimerCounterSeconds);
        lblTimerCounterSeconds.setBounds(770, 10, 50, 50);

        lblTimer.setFont(lblTimer.getFont().deriveFont(lblTimer.getFont().getStyle() | java.awt.Font.BOLD, 24));
        lblTimer.setText("Timer:");
        MazeScreen.getContentPane().add(lblTimer);
        lblTimer.setBounds(560, 20, 72, 32);

        lblTimerCounterMin.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        MazeScreen.getContentPane().add(lblTimerCounterMin);
        lblTimerCounterMin.setBounds(640, 10, 50, 50);

        btnPause.setBackground(new java.awt.Color(255, 204, 204));
        btnPause.setText("Pause");
        btnPause.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnPauseActionPerformed(evt);
            }
        });
        MazeScreen.getContentPane().add(btnPause);
        btnPause.setBounds(790, 660, 66, 32);

        btnExit.setBackground(new java.awt.Color(255, 204, 204));
        btnExit.setText("Exit");
        btnExit.setFocusable(false);
        btnExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnExitActionPerformed(evt);
            }
        });
        MazeScreen.getContentPane().add(btnExit);
        btnExit.setBounds(50, 660, 60, 32);

        txaGameScreen.setEditable(false);
        txaGameScreen.setColumns(20);
        txaGameScreen.setForeground(new java.awt.Color(69, 73, 74));
        txaGameScreen.setRows(5);
        txaGameScreen.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txaGameScreenKeyPressed(evt);
            }
        });
        scrlPaneGame.setViewportView(txaGameScreen);

        MazeScreen.getContentPane().add(scrlPaneGame);
        scrlPaneGame.setBounds(50, 80, 810, 570);

        lblSecs.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblSecs.setText("Seconds");
        MazeScreen.getContentPane().add(lblSecs);
        lblSecs.setBounds(810, 20, 80, 40);

        lblMins.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblMins.setText("Minutes");
        MazeScreen.getContentPane().add(lblMins);
        lblMins.setBounds(670, 30, 70, 19);

        lblBackgrMaze.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Background.jpg"))); // NOI18N
        MazeScreen.getContentPane().add(lblBackgrMaze);
        lblBackgrMaze.setBounds(10, 0, 910, 750);

        MenuMaze.setText("Help");

        menMazeHelp.setText("Help Screen");
        menMazeHelp.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                menMazeHelpActionPerformed(evt);
            }
        });
        MenuMaze.add(menMazeHelp);

        MenuBarMaze.add(MenuMaze);

        MazeScreen.setJMenuBar(MenuBarMaze);

        BestTimesScreen.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        BestTimesScreen.setTitle("Best Times");
        BestTimesScreen.setMinimumSize(new java.awt.Dimension(482, 425));
        BestTimesScreen.setResizable(false);
        BestTimesScreen.setSize(new java.awt.Dimension(410, 320));
        BestTimesScreen.getContentPane().setLayout(null);

        btnBackTimes.setBackground(new java.awt.Color(255, 204, 204));
        btnBackTimes.setText("Back");
        btnBackTimes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnBackTimesActionPerformed(evt);
            }
        });
        BestTimesScreen.getContentPane().add(btnBackTimes);
        btnBackTimes.setBounds(10, 10, 70, 30);

        tblTimes.setAutoCreateRowSorter(true);
        tblTimes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {

            }
        ){public boolean isCellEditable(int row, int column){return false;}}
    );
    tblTimes.setRowHeight(24);
    scrlPaneTimes.setViewportView(tblTimes);

    BestTimesScreen.getContentPane().add(scrlPaneTimes);
    scrlPaneTimes.setBounds(30, 60, 410, 310);

    lblBackgrBestT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Background.jpg"))); // NOI18N
    BestTimesScreen.getContentPane().add(lblBackgrBestT);
    lblBackgrBestT.setBounds(0, 0, 490, 430);

    SaveScreen.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    SaveScreen.setMinimumSize(new java.awt.Dimension(349, 125));
    SaveScreen.getContentPane().setLayout(null);

    btnExitSave.setBackground(new java.awt.Color(255, 204, 204));
    btnExitSave.setText("Exit + Save");
    btnExitSave.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnExitSaveActionPerformed(evt);
        }
    });
    SaveScreen.getContentPane().add(btnExitSave);
    btnExitSave.setBounds(30, 40, 110, 32);

    btnHomeSave.setBackground(new java.awt.Color(255, 204, 204));
    btnHomeSave.setText("Home + Save");
    btnHomeSave.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnHomeSaveActionPerformed(evt);
        }
    });
    SaveScreen.getContentPane().add(btnHomeSave);
    btnHomeSave.setBounds(210, 40, 110, 32);

    lblSaveScreen.setText("Do you want to ");
    SaveScreen.getContentPane().add(lblSaveScreen);
    lblSaveScreen.setBounds(130, 10, 100, 20);

    lblSaveBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Background.jpg"))); // NOI18N
    SaveScreen.getContentPane().add(lblSaveBack);
    lblSaveBack.setBounds(-9, -4, 360, 100);

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Home ");
    setMinimumSize(new java.awt.Dimension(395, 360));
    setResizable(false);
    getContentPane().setLayout(null);

    lblMazeTitle.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
    lblMazeTitle.setText("The Escapist Maze");
    getContentPane().add(lblMazeTitle);
    lblMazeTitle.setBounds(94, 12, 231, 63);

    btnLogin.setBackground(new java.awt.Color(255, 204, 204));
    btnLogin.setText("Login");
    btnLogin.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnLoginActionPerformed(evt);
        }
    });
    getContentPane().add(btnLogin);
    btnLogin.setBounds(23, 87, 127, 50);

    btnRegister.setBackground(new java.awt.Color(255, 204, 204));
    btnRegister.setText("Register");
    btnRegister.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnRegisterActionPerformed(evt);
        }
    });
    getContentPane().add(btnRegister);
    btnRegister.setBounds(23, 173, 127, 50);

    btnDelete.setBackground(new java.awt.Color(255, 204, 204));
    btnDelete.setText("Delete");
    btnDelete.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnDeleteActionPerformed(evt);
        }
    });
    getContentPane().add(btnDelete);
    btnDelete.setBounds(23, 259, 127, 50);

    btnPlay.setBackground(new java.awt.Color(255, 204, 204));
    btnPlay.setText("Play");
    btnPlay.setMaximumSize(new java.awt.Dimension(60, 25));
    btnPlay.setMinimumSize(new java.awt.Dimension(60, 25));
    btnPlay.setPreferredSize(new java.awt.Dimension(60, 25));
    btnPlay.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnPlayActionPerformed(evt);
        }
    });
    getContentPane().add(btnPlay);
    btnPlay.setBounds(210, 260, 127, 50);

    btnBestTimes.setBackground(new java.awt.Color(255, 204, 204));
    btnBestTimes.setText("Best Times");
    btnBestTimes.setMaximumSize(new java.awt.Dimension(60, 25));
    btnBestTimes.setMinimumSize(new java.awt.Dimension(60, 25));
    btnBestTimes.setPreferredSize(new java.awt.Dimension(60, 25));
    btnBestTimes.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnBestTimesActionPerformed(evt);
        }
    });
    getContentPane().add(btnBestTimes);
    btnBestTimes.setBounds(210, 87, 127, 50);

    btnHelp.setBackground(new java.awt.Color(255, 204, 204));
    btnHelp.setText("Help");
    btnHelp.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnHelpActionPerformed(evt);
        }
    });
    getContentPane().add(btnHelp);
    btnHelp.setBounds(210, 173, 127, 50);

    MainBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Background.jpg"))); // NOI18N
    getContentPane().add(MainBack);
    MainBack.setBounds(0, 0, 470, 380);

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Once button is pressed code is run to determine what maze and colour will
     * be used.
     */
    private void btnPlayChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayChooseActionPerformed

        secs = 0;
        mins = 0;
        lblTimerCounterMin.setText("");
        lblTimerCounterSeconds.setText("");

        selectedMaze = cmdMaze.getSelectedItem() + ".txt";

        colour = "" + cmdColour.getSelectedItem();
// Gets the grid
        grid = rg.print(selectedMaze);
// Generates the maze using the selected grid.
        gridGen();
// Starts the timer.
        convertTime();

        ChooseScreen.setVisible(false);

        MazeScreen.setVisible(true);

    }//GEN-LAST:event_btnPlayChooseActionPerformed

    private void btnBackDelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBackDelActionPerformed
    {//GEN-HEADEREND:event_btnBackDelActionPerformed

        user = "";
        pass = "";
        txfPasswordDel.setText("");

        DeleteScreen.setVisible(false);

        this.setVisible(true);

    }//GEN-LAST:event_btnBackDelActionPerformed

    private void btnBackRegActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBackRegActionPerformed
    {//GEN-HEADEREND:event_btnBackRegActionPerformed

        user = "";
        pass = "";
        passConf = "";
        txfUsernameReg.setText("");
        txfPasswordReg.setText("");
        txfPasswordConfReg.setText("");

        RegisterScreen.setVisible(false);

        this.setVisible(true);
    }//GEN-LAST:event_btnBackRegActionPerformed

    private void btnLogoutChooseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLogoutChooseActionPerformed
    {//GEN-HEADEREND:event_btnLogoutChooseActionPerformed

        pass = "";
        user = "";

        btnForgot.setVisible(false);

        ChooseScreen.setVisible(false);

        LoginScreen.setVisible(true);
// Loads the players from the database.
        pl.loadPlayers();

    }//GEN-LAST:event_btnLogoutChooseActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnExitActionPerformed
    {//GEN-HEADEREND:event_btnExitActionPerformed
        t.stop();
        int opt = JOptionPane.showConfirmDialog(MazeScreen, "Are you sure you want to exit?", "Exit", JOptionPane.YES_NO_OPTION);

        if (opt == 0)
        {
            System.exit(0);
        } else
        {
            t.start();
        }

    }//GEN-LAST:event_btnExitActionPerformed

    private void btnBackLoginActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBackLoginActionPerformed
    {//GEN-HEADEREND:event_btnBackLoginActionPerformed
        count = 0;
        btnLogin.setText("Login");
        btnPlay.setVisible(false);
        LoginScreen.setVisible(false);
        this.setVisible(true);
    }//GEN-LAST:event_btnBackLoginActionPerformed

    private void btnBackTimesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBackTimesActionPerformed
    {//GEN-HEADEREND:event_btnBackTimesActionPerformed
        BestTimesScreen.setVisible(false);
        this.setVisible(true);

    }//GEN-LAST:event_btnBackTimesActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPauseActionPerformed
    {//GEN-HEADEREND:event_btnPauseActionPerformed
        PauseScreen.setVisible(true);
        PauseScreen.setLocationRelativeTo(this);
        PauseScreen.setAlwaysOnTop(true);

        t.stop();
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnContinuePauseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnContinuePauseActionPerformed
    {//GEN-HEADEREND:event_btnContinuePauseActionPerformed
        PauseScreen.setVisible(false);
        txaGameScreen.requestFocus();
        t.start();
    }//GEN-LAST:event_btnContinuePauseActionPerformed

    private void btnBestTimesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBestTimesActionPerformed
    {//GEN-HEADEREND:event_btnBestTimesActionPerformed
        BestTimesScreen.setVisible(true);
        this.setVisible(false);
        BestTimesScreen.setLocationRelativeTo(DeleteScreen);
// Loads details to be used for the table.    
        loadDetails();

    }//GEN-LAST:event_btnBestTimesActionPerformed
    /**
     * Once this button is clicked, the user is asked if they want to continue
     * or start a new game. Depending if they have a previous saved game. Loads
     * specific maze depending on the users choice.
     */
    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPlayActionPerformed
    {//GEN-HEADEREND:event_btnPlayActionPerformed
// Loads the players from the database.       
        pl.loadPlayers();
        int option = -1;
// Checks to see if the player has a saved game and if their time is more than 0 they are asked if they want to continue.
        if (pl.searchTime(user) > 0)
        {

            option = JOptionPane.showConfirmDialog(this, "Do you want to continue?", "Continue", JOptionPane.YES_NO_OPTION);

        }
// Continue/ Yes option 
        if (option == 0)
        {
            sg.save = true;
// Loads the saved game for the specific user
            sg.loadSavedGame(user);

            secs = sg.getTime() % 60;
            mins = sg.getTime() / 60;
            colour = sg.getColour();

            if (mins == 0)
            {
                lblTimerCounterMin.setText(String.valueOf(""));
            } else
            {
                lblTimerCounterMin.setText(String.valueOf(mins));
            }

            lblTimerCounterSeconds.setText(String.valueOf(secs));
// Generates the maze for the selected grid.
            gridGen();
// Starts the timer. 
            convertTime();
            txaGameScreen.requestFocus();
            this.setVisible(false);
            MazeScreen.setVisible(true);
// New Game/ No option
        } else if (option == 1)
        {
            sg.save = false;
            pl.updateTime(user, 0);

            this.setVisible(false);
            ChooseScreen.setVisible(true);
            ChooseScreen.setLocationRelativeTo(this);
            txaGameScreen.requestFocus();

        } else
        {
            sg.save = false;
            this.setVisible(false);
            ChooseScreen.setVisible(true);
            ChooseScreen.setLocationRelativeTo(this);
            txaGameScreen.requestFocus();
        }


    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteActionPerformed
    {//GEN-HEADEREND:event_btnDeleteActionPerformed
        pl.loadPlayers();

        DefaultComboBoxModel mod = new DefaultComboBoxModel(pl.usernameList());
        cmdUsernameDel.setModel(mod);

        DeleteScreen.setVisible(true);
        this.setVisible(false);
        DeleteScreen.setLocationRelativeTo(this);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRegisterActionPerformed
    {//GEN-HEADEREND:event_btnRegisterActionPerformed
        RegisterScreen.setVisible(true);
        this.setVisible(false);
        RegisterScreen.setLocationRelativeTo(this);

    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLoginActionPerformed
    {//GEN-HEADEREND:event_btnLoginActionPerformed

        if (btnLogin.getText().equals("Login"))
        {
            pl.loadPlayers();
// Loads the list of users.
            pl.usernameList();
            DefaultComboBoxModel mod = new DefaultComboBoxModel(pl.usernameList());
            cmdUsername.setModel(mod);
            btnForgot.setVisible(false);
            LoginScreen.setVisible(true);
            LoginScreen.setLocationRelativeTo(this);
            this.setVisible(false);

        } else
        {

            user = "";
            pass = "";
            count = 0;
            btnLogin.setText("Login");
            btnPlay.setVisible(false);
        }


    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnDeleteScreenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteScreenActionPerformed
    {//GEN-HEADEREND:event_btnDeleteScreenActionPerformed
// Method to delete users.
        delete();
    }//GEN-LAST:event_btnDeleteScreenActionPerformed

    private void btnBackHelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBackHelpActionPerformed
    {//GEN-HEADEREND:event_btnBackHelpActionPerformed
        if (frame.equals("RegisterScreen"))
        {
            HelpScreen.setVisible(false);
            RegisterScreen.setVisible(true);

        } else if (frame.equals("MazeScreen"))
        {
            HelpScreen.setVisible(false);
            MazeScreen.setVisible(true);
            t.start();

        } else if (frame.equals("HomeScreen"))
        {
            HelpScreen.setVisible(false);

            this.setVisible(true);
        }
    }//GEN-LAST:event_btnBackHelpActionPerformed

    private void menMazeHelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menMazeHelpActionPerformed
    {//GEN-HEADEREND:event_menMazeHelpActionPerformed
        HelpScreen.setVisible(true);
        HelpScreen.setLocationRelativeTo(this);
        MazeScreen.setVisible(false);
        t.stop();
        frame = "MazeScreen";
    }//GEN-LAST:event_menMazeHelpActionPerformed

    private void btnRegisterScreenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRegisterScreenActionPerformed
    {//GEN-HEADEREND:event_btnRegisterScreenActionPerformed
// The method to validate the details when your try register.
        checkRegisterDetails();
    }//GEN-LAST:event_btnRegisterScreenActionPerformed

    private void btnSaveGameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSaveGameActionPerformed
    {//GEN-HEADEREND:event_btnSaveGameActionPerformed

        SaveScreen.setVisible(true);
        SaveScreen.setLocationRelativeTo(this);
        PauseScreen.setVisible(false);


    }//GEN-LAST:event_btnSaveGameActionPerformed

    private void btnExitSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnExitSaveActionPerformed
    {//GEN-HEADEREND:event_btnExitSaveActionPerformed
        int times = 0;
        times = secs + (mins * 60);
        sg.time = times;
        sg.convertGame(user, times, grid, colour);
        pl.updateTime(user, times);
        System.exit(0);
    }//GEN-LAST:event_btnExitSaveActionPerformed

    private void chkDelPassActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkDelPassActionPerformed
    {//GEN-HEADEREND:event_chkDelPassActionPerformed
// Makes the password visible.
// Taken from https://stackoverflow.com/questions/19755259/hide-show-password-in-a-jtextfield-java-swing
        if (chkDelPass.isSelected())
        {
            txfPasswordDel.setEchoChar((char) 0);
        } else
        {
            txfPasswordDel.setEchoChar(('*'));

        }
    }//GEN-LAST:event_chkDelPassActionPerformed

    private void chkRegPassActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkRegPassActionPerformed
    {//GEN-HEADEREND:event_chkRegPassActionPerformed
// Makes the password visible.
// Taken from https://stackoverflow.com/questions/19755259/hide-show-password-in-a-jtextfield-java-swing        
        if (chkRegPass.isSelected())
        {
            txfPasswordConfReg.setEchoChar((char) 0);
        } else
        {
            txfPasswordConfReg.setEchoChar(('*'));

        }
    }//GEN-LAST:event_chkRegPassActionPerformed

    private void btnHomeSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnHomeSaveActionPerformed
    {//GEN-HEADEREND:event_btnHomeSaveActionPerformed

        int times = 0;
        times = secs + (mins * 60);
        sg.time = times;
        sg.convertGame(user, times, grid, colour);

        pl.updateTime(user, times);

        SaveScreen.setVisible(false);
        MazeScreen.setVisible(false);
        this.setVisible(true);

        txaGameScreen.removeAll();


    }//GEN-LAST:event_btnHomeSaveActionPerformed

    private void pwdPasswordKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_pwdPasswordKeyPressed
    {//GEN-HEADEREND:event_pwdPasswordKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
// Method for checking if the password matches.
            checkPassword();

        }
    }//GEN-LAST:event_pwdPasswordKeyPressed

    private void txfPasswordConfRegKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txfPasswordConfRegKeyPressed
    {//GEN-HEADEREND:event_txfPasswordConfRegKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            checkRegisterDetails();

        }
    }//GEN-LAST:event_txfPasswordConfRegKeyPressed

    private void txfPasswordDelKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txfPasswordDelKeyPressed
    {//GEN-HEADEREND:event_txfPasswordDelKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            delete();
        }
    }//GEN-LAST:event_txfPasswordDelKeyPressed

    private void cmdColourKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_cmdColourKeyPressed
    {//GEN-HEADEREND:event_cmdColourKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            MazeScreen.setVisible(true);
            ChooseScreen.setVisible(false);

            selectedMaze = cmdMaze.getSelectedItem() + ".txt";

            gridGen();
            convertTime();
        }
    }//GEN-LAST:event_cmdColourKeyPressed

    private void txaGameScreenKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txaGameScreenKeyPressed
    {//GEN-HEADEREND:event_txaGameScreenKeyPressed
// Checks which key is pressed and runs a certain method for that key.
        switch (evt.getKeyCode())
        {
            case KeyEvent.VK_DOWN:
// Down arrow method.
                moveDown();
                break;
            case KeyEvent.VK_UP:
// Up arrow method.
                moveUp();
                break;
            case KeyEvent.VK_LEFT:
// Left arrow method.
                moveLeft();
                break;
            case KeyEvent.VK_RIGHT:
// Right arrow method.
                moveRight();
                break;

        }
    }//GEN-LAST:event_txaGameScreenKeyPressed

    private void btnLoginScreenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLoginScreenActionPerformed
    {//GEN-HEADEREND:event_btnLoginScreenActionPerformed
        checkPassword();
    }//GEN-LAST:event_btnLoginScreenActionPerformed

    private void btnForgotActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnForgotActionPerformed
    {//GEN-HEADEREND:event_btnForgotActionPerformed
// Method for the forgot password.
        forgotPass();
    }//GEN-LAST:event_btnForgotActionPerformed

    private void btnHomePauseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnHomePauseActionPerformed
    {//GEN-HEADEREND:event_btnHomePauseActionPerformed
        txaGameScreen.removeAll();
        secs = 0;
        mins = 0;
        MazeScreen.setVisible(false);
        PauseScreen.setVisible(false);
        this.setVisible(true);
    }//GEN-LAST:event_btnHomePauseActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnHelpActionPerformed
    {//GEN-HEADEREND:event_btnHelpActionPerformed
        frame = "HomeScreen";
        this.setVisible(false);
        HelpScreen.setLocationRelativeTo(this);
        HelpScreen.setVisible(true);
    }//GEN-LAST:event_btnHelpActionPerformed
    /**
     * This method is run when the using clicks the forgot password button. This
     * method asks the user what the answer to their security question is.
     * Depending on that answer the user can change their password.
     */
    public void forgotPass()
    {
        String qq = "";
        count = 0;
        boolean cont = true;
        try
        {
// Continuesly asks question until they enter a answer.
            do
            {
                qq = JOptionPane.showInputDialog(LoginScreen, "Security question:\nWhat is the name of your first dog?");

            } while (qq.equals(""));
            question = pl.checkQuestion(user);

        } catch (NullPointerException e)
        {

        }
        try
        {
// Checks if their answer is equal to their answer in the database.
            if (qq.equals(question))
            {
                while (cont == true)
                {
                    newPass = JOptionPane.showInputDialog("Enter your new password");
// Checks if the password is valid.
                    if (pl.validatePass(newPass, user.length(), isItNew).equals("true"))
                    {

                        cont = false;
                        pl.changePassword(newPass, user);
                        btnForgot.setVisible(false);
                        user = "";
                    } else
                    {

                        JOptionPane.showMessageDialog(LoginScreen, pl.validatePass(newPass, user.length(), isItNew));

                    }
                    pl.loadPlayers();
                }

            }
        } catch (NullPointerException ex)
        {

        }
    }

    /**
     * This method deletes the users details from the database. As well as their
     * file if it exists
     */
    public void delete()
    {

        pass = "";
        char[] charPass = txfPasswordDel.getPassword();
        String userDel = "";
        userDel = "" + cmdUsernameDel.getSelectedItem();

        for (int i = 0; i < charPass.length; i++)
        {
            pass += charPass[i];
        }
// Searchs the password for the selected user and test to see if it equals the password entered.
        if (pl.searchPass(userDel).equals(pass))
        {
            deleteFile(userDel);

            txfPasswordDel.setText("");
// If the user equals the selected user, then sets the text of the login button to login.
            if (user.equals(userDel))
            {
                btnLogin.setText("Login");
                btnPlay.setVisible(false);
                pl.delete(user, pass);
                user = "";
                pass = "";
            } else
            {
                pl.delete(userDel, pass);
            }
            pl.loadPlayers();
            pl.usernameList();
            DefaultComboBoxModel mod = new DefaultComboBoxModel(pl.usernameList());
            cmdUsernameDel.setModel(mod);

            JOptionPane.showMessageDialog(DeleteScreen, "Details deleted");
        } else
        {
            JOptionPane.showMessageDialog(DeleteScreen, "Password does not match");
            txfPasswordDel.setText("");

        }
        pass = "";
    }

    /**
     * This method checks all the register details when the user is registering,
     * all the validation for the username and password is done in this method.
     */
    public void checkRegisterDetails()
    {
        isItNew = false;
        pl.loadPlayers();

        char[] password, confPassword;
        user = txfUsernameReg.getText();

        password = txfPasswordReg.getPassword();
        confPassword = txfPasswordConfReg.getPassword();
        for (int i = 0; i < password.length; i++)
        {
            pass += password[i];
        }
        for (int i = 0; i < confPassword.length; i++)
        {
            passConf += confPassword[i];
        }

        if (!user.equalsIgnoreCase("maze1") && !user.equalsIgnoreCase("maze2") && !user.equalsIgnoreCase("maze3"))
        {
// Checks if the username is a duplicate username.

            if (pl.checkDupUser(user) == false)
            {

                length = user.length();
// Checks if the password equals the confirm password.
                if (pass.equals(passConf))
                {

                    if (pl.validatePass(pass, length, isItNew).equals("true"))
                    {
                        try
                        {
// Asks for them to enter their answer to the security question until they enter a value.
                            do
                            {
                                question = JOptionPane.showInputDialog(RegisterScreen, "Security question:\nWhat is the name of your first dog?");

                            } while (question.equals(""));
                            pl.register(user, pass, question);
                            pass = "";
                            passConf = "";
                            user = "";
                            txfPasswordReg.setText("");
                            txfPasswordConfReg.setText("");
                            txfUsernameReg.setText("");
                            JOptionPane.showMessageDialog(RegisterScreen, "User registered");

                        } catch (NullPointerException e)
                        {
                            pass = "";
                            passConf = "";
                            txfPasswordReg.setText("");
                            txfPasswordConfReg.setText("");
                        }

                    } else
                    {
                        JOptionPane.showMessageDialog(RegisterScreen, pl.validatePass(pass, length, isItNew));
                        passConf = "";
                        txfPasswordConfReg.setText("");
                        pass = "";

                        txfPasswordReg.setText("");
                    }

                } else
                {

                    JOptionPane.showMessageDialog(RegisterScreen, "Passwords do not match, Please retry");

                    pass = "";

                    passConf = "";
                    txfPasswordConfReg.setText("");

                    txfPasswordReg.setText("");
                }
            } else
            {
                JOptionPane.showMessageDialog(RegisterScreen, "Duplicate username");
                txfUsernameReg.setText("");
                pass = "";

                passConf = "";
                txfPasswordConfReg.setText("");

                txfPasswordReg.setText("");
                user = "";

            }
        } else
        {
            JOptionPane.showMessageDialog(RegisterScreen, "Your user name cannot be that, please enter a new username");
            user = "";
            passConf = "";
            pass = "";
            txfUsernameReg.setText("");
            txfPasswordConfReg.setText("");
            txfPasswordReg.setText("");
        }
        pass = "";
        user = "";
    }

    /**
     * This method checks if the password that the user entered is equal to the
     * password of the user and if so then the user is logged in.
     */
    public void checkPassword()
    {
        char[] passLog = pwdPassword.getPassword();
        user = "" + cmdUsername.getSelectedItem();

        for (int i = 0; i < passLog.length; i++)
        {
            pass += passLog[i];
        }

        if (pl.searchPass(user).equals(pass))
        {

            btnPlay.setVisible(true);
            btnLogin.setText("Logout");
            pwdPassword.setText("");
            LoginScreen.setVisible(false);
            this.setVisible(true);
        } else
        {
            pass = "";

            JOptionPane.showMessageDialog(LoginScreen, "Password does not match");
            pwdPassword.setText("");
            count++;
            if (count == 2)
            {

                btnForgot.setVisible(true);

            }
        }
    }

    /**
     * This method generates the grid for the user to play on. Creates all the
     * buttons with its desired icons and a maze is formed from it.
     */
    public void gridGen()
    {
        int posr = 0;

        if (sg.save)
        {

            grid = sg.loadSavedGame(user);

        } else
        {
            
            grid = rg.print(selectedMaze);

        }

        for (int row = 0; row < 14; row++)
        {
            int posc = 0;
            for (int col = 0; col < 20; col++)
            {

                gridBlock[row][col] = new JButton("");
                gridBlock[row][col].setFocusable(false);
// Tests each 2D Array x and y value and depending on what the value is the allocated icon is set to it.
                switch (grid[row][col])
                {
                    case 1:

                        gridBlock[row][col].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePath1.jpg")));
                        break;
                    case 0:
                        gridBlock[row][col].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/hedge1.jpg")));
                        break;
                    case 3:

                        colourIf(row, col);

                        posRow = row;
                        posCol = col;
                        break;

                    default:

                        gridBlock[row][col].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/finishLine1.jpg")));
                        break;
                }
                gridBlock[row][col].setBounds(posc, posr, 47, 47);

                txaGameScreen.add(gridBlock[row][col]);

                posc += 40;

            }
            posr += 40;
        }

    }

    /**
     * Receives the row and col and uses it to set the finish line icon to the
     * correct colour.
     */
    public void finColourIf(int row, int col)
    {

        switch (colour)
        {
            case "Red":
                gridBlock[row][col].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/finishLine1Red.jpg")));
                break;
            case "Purple":
                gridBlock[row][col].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/finishLine1Purple.jpg")));
                break;
            case "Orange":
                gridBlock[row][col].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/finishLine1Orange.jpg")));
                break;

        }
    }

    /**
     * Receives the row and col and uses it to set the correct path player icon
     */
    public void colourIf(int row, int col)
    {

        if (sg.save == false)
        {
            colour = "" + cmdColour.getSelectedItem();

        }

        switch (colour)
        {
            case "Red":
                gridBlock[row][col].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePathRed.jpg")));
                break;
            case "Purple":
                gridBlock[row][col].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePathPurple.jpg")));
                break;
            case "Orange":
                gridBlock[row][col].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePathOrange.jpg")));
                break;

        }
    }

    /**
     * This method moves the character down.
     */
    public void moveDown()
    {

        try
        {
            txaGameScreen.requestFocus();
            if (checkMove(posRow + 1, posCol).equals("true"))
            {

                grid[posRow][posCol] = 1;

                grid[posRow + 1][posCol] = 3;
                colourIf(posRow + 1, posCol);

                gridBlock[posRow][posCol].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePath1.jpg")));
                posRow++;
            } else if (checkMove(posRow + 1, posCol).equals("finish"))
            {

                colourIf(posRow + 1, posCol);
                gridBlock[posRow][posCol].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePath1.jpg")));
                finColourIf(posRow + 1, posCol);

                finish();

            }
        } catch (ArrayIndexOutOfBoundsException e)
        {

        }
    }

    /**
     * This method moves the character up.
     */
    public void moveUp()
    {

        try
        {
            txaGameScreen.requestFocus();
            if (checkMove(posRow - 1, posCol).equals("true"))
            {

                grid[posRow][posCol] = 1;

                grid[posRow - 1][posCol] = 3;
                colourIf(posRow - 1, posCol);

                gridBlock[posRow][posCol].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePath1.jpg")));
                posRow--;
            } else if (checkMove(posRow - 1, posCol).equals("finish"))
            {

                gridBlock[posRow][posCol].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePath1.jpg")));
                finColourIf(posRow - 1, posCol);

                finish();

            }
        } catch (ArrayIndexOutOfBoundsException e)
        {

        }
    }

    /**
     * This method moves the character left.
     */
    public void moveLeft()
    {

        try
        {
            txaGameScreen.requestFocus();
            if (checkMove(posRow, posCol - 1).equals("true"))
            {

                grid[posRow][posCol] = 1;

                grid[posRow][posCol - 1] = 3;
                colourIf(posRow, posCol - 1);

                gridBlock[posRow][posCol].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePath1.jpg")));
                posCol--;
            } else if (checkMove(posRow, posCol - 1).equals("finish"))
            {

                gridBlock[posRow][posCol].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePath1.jpg")));
                finColourIf(posRow, posCol - 1);

                finish();

            }
        } catch (ArrayIndexOutOfBoundsException e)
        {

        }
    }

    /**
     * This method moves the character right.
     */
    public void moveRight()
    {

        try
        {
            txaGameScreen.requestFocus();
            if (checkMove(posRow, posCol + 1).equals("true"))
            {

                grid[posRow][posCol] = 1;

                grid[posRow][posCol + 1] = 3;
                colourIf(posRow, posCol + 1);

                gridBlock[posRow][posCol].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePath1.jpg")));
                posCol++;
            } else if (checkMove(posRow, posCol + 1).equals("finish"))
            {

                gridBlock[posRow][posCol].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/stonePath1.jpg")));
                finColourIf(posRow, posCol + 1);
                finish();

            }
        } catch (ArrayIndexOutOfBoundsException e)
        {

        }
    }

    /**
     * This method receives a file name and deletes that file.
     */
    public void deleteFile(String fi)
    {

// Taken from https://www.geeksforgeeks.org/delete-file-using-java/        
        File file = new File(fi + ".txt");

        if (file.delete())
        {
            System.out.println("File deleted successfully");
        } else
        {
            System.out.println("Failed to delete the file");
        }

    }

    /**
     * This method saves all the required data for the user once the game is
     * finished.
     */
    public void finish()
    {
        
        
            int time = 0;
            int times = 0;
            times = secs + (mins * 60);
            sg.time = times;
            t.stop();

            pl.updateTime(user, time);
            pl.checkBestTime(user, times);
           
            deleteFile(user);
            JOptionPane.showMessageDialog(MazeScreen, "Well Done!");
            MazeScreen.setVisible(false);
            txaGameScreen.removeAll();
            this.setVisible(true);
         

    }

    /**
     * This method receives the row and col and checks if the user can move to
     * where they want to move.
     */
    public String checkMove(int row, int col)
    {

        if (grid[row][col] == 1)
        {
            return "true";
        } else if (grid[row][col] == 2)
        {

            return "finish";

        }
        return "false";
    }

    /**
     * This method loads the details to the table and sets the table with the
     * best times and usernames.
     */
    public void loadDetails()
    {
        pl.loadPlayers();
        pl.sort();
        DefaultTableModel model = (DefaultTableModel) tblTimes.getModel();

        tblTimes.getTableHeader().setFont(new java.awt.Font("Arial", 1, 28));
        String[] colum =
        {
            "Username:", "HighTime:"
        };
        tblTimes.setFont(new java.awt.Font("Arial", 1, 24));
        String[][] details = pl.highTimeDetails();

        model.setDataVector(details, colum);

        tblTimes.getColumnModel().getColumn(0).setPreferredWidth(2);
    }

    /**
     * This method is where the timer is created and can be called when the
     * timer is needed.
     */
    public void convertTime()
    {

        t = new Timer(1000, new ActionListener()

        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {

                lblTimerCounterSeconds.setText(String.valueOf(secs));

                secs++;
                if (secs == 60)
                {
                    secs = 0;
                    mins++;
                    lblTimerCounterMin.setText(String.valueOf(mins));

                }
                lblTimerCounterSeconds.setText(String.valueOf(secs));
            }
        });
        t.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(GUIDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(GUIDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(GUIDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(GUIDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GUIDesign().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame BestTimesScreen;
    private javax.swing.JFrame ChooseScreen;
    private javax.swing.JFrame DeleteScreen;
    private javax.swing.JFrame HelpScreen;
    private javax.swing.JFrame LoginScreen;
    private javax.swing.JLabel MainBack;
    private javax.swing.JFrame MazeScreen;
    private javax.swing.JMenuBar MenuBarMaze;
    private javax.swing.JMenu MenuMaze;
    private javax.swing.JFrame PauseScreen;
    private javax.swing.JFrame RegisterScreen;
    private javax.swing.JFrame SaveScreen;
    private javax.swing.JButton btnBackDel;
    private javax.swing.JButton btnBackHelp;
    private javax.swing.JButton btnBackLogin;
    private javax.swing.JButton btnBackReg;
    private javax.swing.JButton btnBackTimes;
    private javax.swing.JButton btnBestTimes;
    private javax.swing.JButton btnContinuePause;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteScreen;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnExitSave;
    private javax.swing.JButton btnForgot;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnHomePause;
    private javax.swing.JButton btnHomeSave;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLoginScreen;
    private javax.swing.JButton btnLogoutChoose;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnPlayChoose;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnRegisterScreen;
    private javax.swing.JButton btnSaveGame;
    private javax.swing.JCheckBox chkDelPass;
    private javax.swing.JCheckBox chkRegPass;
    private javax.swing.JComboBox<String> cmdColour;
    private javax.swing.JComboBox<String> cmdMaze;
    private javax.swing.JComboBox<String> cmdUsername;
    private javax.swing.JComboBox<String> cmdUsernameDel;
    private javax.swing.JPanel jPaneDelete;
    private javax.swing.JPanel jPanePlay;
    private javax.swing.JPanel jPaneReg;
    private javax.swing.JPanel jPaneTable;
    private javax.swing.JLabel lblBackgrBestT;
    private javax.swing.JLabel lblBackgrChoose;
    private javax.swing.JLabel lblBackgrDel;
    private javax.swing.JLabel lblBackgrHelp;
    private javax.swing.JLabel lblBackgrLogin;
    private javax.swing.JLabel lblBackgrMaze;
    private javax.swing.JLabel lblBackgrPause;
    private javax.swing.JLabel lblBackgrReg;
    private javax.swing.JLabel lblChoose;
    private javax.swing.JLabel lblColour;
    private javax.swing.JLabel lblDeleteScreen;
    private javax.swing.JLabel lblHelp;
    private javax.swing.JLabel lblLoginTitle;
    private javax.swing.JLabel lblMaze;
    private javax.swing.JLabel lblMazeTitle;
    private javax.swing.JLabel lblMins;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPasswordConReg;
    private javax.swing.JLabel lblPasswordDel;
    private javax.swing.JLabel lblPasswordReg;
    private javax.swing.JLabel lblPause;
    private javax.swing.JLabel lblRegister;
    private javax.swing.JLabel lblSaveBack;
    private javax.swing.JLabel lblSaveScreen;
    private javax.swing.JLabel lblSecs;
    private javax.swing.JLabel lblTimer;
    private javax.swing.JLabel lblTimerCounterMin;
    private javax.swing.JLabel lblTimerCounterSeconds;
    private javax.swing.JLabel lblTitleMaze;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblUsernameDel;
    private javax.swing.JLabel lblUsernameReg;
    private javax.swing.JMenuItem menMazeHelp;
    private javax.swing.JPasswordField pwdPassword;
    private javax.swing.JScrollPane scrlPaneDel;
    private javax.swing.JScrollPane scrlPaneGame;
    private javax.swing.JScrollPane scrlPanePlay;
    private javax.swing.JScrollPane scrlPaneReg;
    private javax.swing.JScrollPane scrlPaneScores;
    private javax.swing.JScrollPane scrlPaneTimes;
    private javax.swing.JTabbedPane tbPane;
    private javax.swing.JTable tblTimes;
    private javax.swing.JTextArea txaDelete;
    private javax.swing.JTextArea txaGameScreen;
    private javax.swing.JTextArea txaPlay;
    private javax.swing.JTextArea txaReg;
    private javax.swing.JTextArea txaScores;
    private javax.swing.JPasswordField txfPasswordConfReg;
    private javax.swing.JPasswordField txfPasswordDel;
    private javax.swing.JPasswordField txfPasswordReg;
    private javax.swing.JTextField txfUsernameReg;
    // End of variables declaration//GEN-END:variables
}
